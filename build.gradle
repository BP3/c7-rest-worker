plugins {
    id 'java'
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${springDependencyManagementVersion}"
    id 'jacoco'
    id 'checkstyle'
    id 'com.github.spotbugs' version '6.0.21'
    id 'org.owasp.dependencycheck' version '10.0.4'
}

group = 'com.bp3'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom "org.camunda.bpm:camunda-bom:${camundaVersion}"
        mavenBom "org.springframework.boot:spring-boot-starter-parent:${springBootVersion}"
    }
}

dependencies {
    annotationProcessor('org.projectlombok:lombok')
    compileOnly('org.projectlombok:lombok')

    implementation('org.camunda.bpm.springboot:camunda-bpm-spring-boot-starter-external-task-client')
    implementation('org.camunda.connect:camunda-connect-http-client')
    implementation('com.fasterxml.jackson.datatype:jackson-datatype-jsr310')

    // workaround for external task dependency issue - https://github.com/camunda/camunda-bpm-platform/issues/3829
    implementation("jakarta.xml.bind:jakarta.xml.bind-api:${jakartaXmlBindApiVersion}")

    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testRuntimeOnly('org.junit.platform:junit-platform-launcher')
}

tasks.named('test') {
    useJUnitPlatform()
    jvmArgs "-Xshare:off"
    if (JavaVersion.current() >= JavaVersion.VERSION_21) {
        jvmArgs "-XX:+EnableDynamicAgentLoading"
    }
    finalizedBy jacocoTestReport
}
jacocoTestReport {
    dependsOn test
}
jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.7
            }

            excludes = ["com.bp3.camunda.camunda7.C7RestConnectorApplication"]
        }
    }
}
tasks.named('check') {
    dependsOn jacocoTestCoverageVerification
}

dependencyCheck {
    nvd {
        validForHours = 24
        apiKey = System.getenv('NIST_NVD_API_KEY') ?: project.hasProperty("nistNvdApiKey") ? nistNvdApiKey : null
    }
    failBuildOnCVSS = 7.0
    skipConfigurations = ["compileClasspath", "compileOnly", "spotbugs", "checkstyle"]
    suppressionFile = file("$rootProject.projectDir/config/vulnerability-suppression.xml")
}

defaultTasks 'build'
